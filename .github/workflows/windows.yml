name: Windows

on:
  push:
  pull_request:
    # 添加“types”过滤器以仅在来自fork的PR上触发工作流程
    types: [opened, synchronize, reopened, closed, pull_request_target]

jobs:
  build:
    # 使用“if”语句来阻止此任务在发布创建触发时运行
    if: ${{ github.event_name != 'release' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        configuration: [ChinaServer]
    steps:
      - uses: actions/checkout@v2
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        shell: cmd
        run: msbuild R3nzSkin/R3nzSkin.vcxproj /p:Platform=x64 /p:Configuration=${{ matrix.configuration }}
      # 添加if条件，仅当不是发布事件时才上传构建产物
      - name: Upload File
        if: ${{ github.event_name != 'release' }}
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: D:\a\R3nzSkin\R3nzSkin\R3nzSkin\Release\ChinaServer\R3nzSkin.dll

  publish:
    needs: build  # 等待 build 任务完成后再执行 publish 任务
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: windows

      - name: 获取最新发布标签
        id: get_latest_tag
        run: echo "::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))"

      - name: 更新版本号
        id: bump_version
        run: echo "::set-output name=next_version::$(echo "${{ steps.get_latest_tag.outputs.tag }}" | awk -F. -v OFS=. '{$NF++;print}')"

      - name: 生成随机版本号
        id: random_version
        run: echo "::set-output name=random_version::$(date +%s | sha256sum | base64 | head -c 8 ; echo)"

      - name: 创建发布
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.random_version.outputs.random_version }}
          release_name: Release ${{ steps.random_version.outputs.random_version }}
          draft: false
          prerelease: false

      - name: 上传发布资产
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./R3nzSkin.dll  # 设置要上传的文件路径，根据之前 build 任务生成的文件路径自行调整
          asset_name: R3nzSkin.dll  # 设置上传后的文件名，根据你的需要自行调整
          asset_content_type: application/octet-stream
