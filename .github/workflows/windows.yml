name: Windows

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        configuration: [ChinaServer]
    steps:
      - uses: actions/checkout@v2
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        shell: cmd
        run: msbuild R3nzSkin/R3nzSkin.vcxproj /p:Platform=x64 /p:Configuration=${{ matrix.configuration }}
      - name: Upload File
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: D:\a\R3nzSkin\R3nzSkin\R3nzSkin\Release\ChinaServer\R3nzSkin.dll

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: windows
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8  # 选择一个合适的 Python 3 版本
      - name: Install bumpversion
        run: pip install bumpversion

      - name: Get Current Version
        id: get_current_version
        run: |
          # 使用 git describe 命令获取当前的最新版本号
          current_version=$(git describe --tags $(git rev-list --tags --max-count=1))
          # 将当前版本号输出为变量
          echo "::set-output name=current_version::${current_version}"

      - name: Bump Version
        id: bump_version
        run: |
          # 使用 bumpversion 工具递增版本号
          bumpversion minor --new-version "${{ steps.get_current_version.outputs.current_version }}"
          # 将新的版本号保存为输出变量
          echo "::set-output name=next_version::$(git describe --tags $(git rev-list --tags --max-count=1))"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.next_version }}
          release_name: Release ${{ steps.bump_version.outputs.next_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./R3nzSkin.dll
          asset_name: R3nzSkin.dll
          asset_content_type: application/octet-stream
