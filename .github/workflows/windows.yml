name: Windows

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        configuration: [ChinaServer]
    steps:
      - uses: actions/checkout@v2
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        shell: cmd
        run: msbuild R3nzSkin/R3nzSkin.vcxproj /p:Platform=x64 /p:Configuration=${{ matrix.configuration }}
      - name: Upload File
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: D:\a\R3nzSkin\R3nzSkin\R3nzSkin\Release\ChinaServer\R3nzSkin.dll

  publish:
    needs: build  # 等待 build 任务完成后再执行 publish 任务
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: windows
      - name: Get Latest Release Tag
        id: get_latest_tag
        run: echo "::set-output name=tag::$(git describe --tags $(git rev-list --tags --max-count=1))"

      - name: Bump Version
        id: bump_version
        run: |
          # 获取最新的 Release 标签
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          # 提取版本号
          version=${latest_tag#v}  # 去除前缀 'v' 得到版本号
          major=$(echo "$version" | cut -d "." -f 1)
          minor=$(echo "$version" | cut -d "." -f 2)
          patch=$(echo "$version" | cut -d "." -f 3)
          # 每次更新将修订版本号加上 1
          patch=$((patch + 1))
          # 生成新版本号并输出
          new_version="r3 v${major}.${minor}.${patch}"
          echo "::set-output name=next_version::$new_version"
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.next_version }}
          release_name: ${{ steps.bump_version.outputs.next_version }}  # 使用版本号作为发布名称
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./R3nzSkin.dll  # 设置要上传的文件路径，根据之前 build 任务生成的文件路径自行调整
          asset_name: R3nzSkin.dll  # 设置上传后的文件名，根据你的需要自行调整
          asset_content_type: application/octet-stream
